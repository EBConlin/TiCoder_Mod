{"task_id": "1", "text": "This step filters out records that are missing required fields or contain logically invalid values (e.g. negative scores, null names, inactive status).", "code": "", "test_setup_code": "", "test_list": ["assert filter_invalid([{'id': 1, 'name': 'Alice'}, {'id': 2, 'name': None}, {'id': 3}]) == [{'id': 1, 'name': 'Alice'}]", "assert filter_invalid([{'id': 10, 'score': 80}, {'id': 11, 'score': -5}, {'id': 12, 'score': 95}]) == [{'id': 10, 'score': 80}, {'id': 12, 'score': 95}]", "assert filter_invalid([{'id': 21, 'active': True}, {'id': 22, 'active': False}]) == [{'id': 21, 'active': True}]", "assert filter_invalid([]) == []"]}
{"task_id": "2", "text": "This step converts a list of cleaned records into a dictionary for efficient access using a key field (e.g. id, email, or username), optionally simplifying the value structure (e.g. extracting scores).", "code": "", "test_setup_code": "", "test_list": ["assert dictify([{'id': 1, 'name': 'Alice'}, {'id': 2, 'name': 'Bob'}]) == {1: {'id': 1, 'name': 'Alice'}, 2: {'id': 2, 'name': 'Bob'}}", "assert dictify([{'email': 'a@example.com'}, {'email': 'b@example.com'}]) == {'a@example.com': {'email': 'a@example.com'}, 'b@example.com': {'email': 'b@example.com'}}", "assert dictify([{'username': 'alice', 'score': 95}, {'username': 'bob', 'score': 88}]) == {'alice': 95, 'bob': 88}", "assert dictify([]) == {}"]}
