{"task_id":"1","text":"This step filters out records that have missing or invalid fields. A valid entry must have a non-empty `name` and a positive `age`.","code":"def filter_invalid(records):\n    pass","test_setup_code":"","test_list":["assert filter_invalid([{ \"name\": \"Alice\", \"age\": 30 }, { \"name\": \"Bob\", \"age\": -5 }, { \"name\": \"Eve\", \"age\": 40 }]) == [{\"name\": \"Alice\", \"age\": 30}, {\"name\": \"Eve\", \"age\": 40}]","assert filter_invalid([{ \"name\": \"Tom\", \"age\": 0 }, { \"name\": \"Lena\", \"age\": 25 }]) == [{\"name\": \"Lena\", \"age\": 25}]","assert filter_invalid([{ \"name\": \"\", \"age\": 22 }, { \"name\": \"Jill\", \"age\": 22 }]) == [{\"name\": \"Jill\", \"age\": 22}]","assert filter_invalid([]) == []","assert filter_invalid([{ \"name\": \"Anon\", \"age\": None }]) == []"]}
{"task_id": "2", "text": "This step takes invalid records and annotates them with `\"status\": \"invalid\"` and a `\"reason\"` explaining why the record was excluded.", "code": "def log_invalid(records):", "test_setup_code": "", "test_list": ["assert log_invalid([{\"name\": \"Bob\", \"age\": -5}]) == [{\"name\": \"Bob\", \"age\": -5, \"status\": \"invalid\", \"reason\": \"negative age\"}]","assert log_invalid([{\"name\": \"\", \"age\": 22}]) == [{\"name\": \"\", \"age\": 22, \"status\": \"invalid\", \"reason\": \"empty name\"}]","assert log_invalid([{\"name\": \"Anon\", \"age\": None}]) == [{\"name\": \"Anon\", \"age\": None, \"status\": \"invalid\", \"reason\": \"missing age\"}]","assert log_invalid([]) == []","assert log_invalid([{\"age\": 22}]) == [{\"age\": 22, \"status\": \"invalid\", \"reason\": \"missing name\"}]"]}
{"task_id": "3", "text": "This step groups annotated invalid entries into a dictionary keyed by their `reason`. Records missing this field are excluded or flagged as malformed.", "code": "def group_by_reason(records):", "test_setup_code": "", "test_list": ["assert group_by_reason([{ \"name\": \"\", \"age\": 20, \"status\": \"invalid\", \"reason\": \"empty name\" }, { \"name\": \"Bob\", \"age\": -5, \"status\": \"invalid\", \"reason\": \"negative age\" }]) == { \"empty name\": [{ \"name\": \"\", \"age\": 20, \"status\": \"invalid\", \"reason\": \"empty name\" }], \"negative age\": [{ \"name\": \"Bob\", \"age\": -5, \"status\": \"invalid\", \"reason\": \"negative age\" }] }","assert group_by_reason([]) == {}","assert group_by_reason([{ \"name\": \"Eve\", \"age\": None, \"status\": \"invalid\", \"reason\": \"missing age\" }]) == { \"missing age\": [{ \"name\": \"Eve\", \"age\": None, \"status\": \"invalid\", \"reason\": \"missing age\" }] }","assert group_by_reason([{ \"status\": \"invalid\" }]) == { \"unknown\": [{ \"status\": \"invalid\", \"reason\": \"unknown\" }] }"]}
{"text": "Write a function to find if a string is a sequence of lowercase letters joined with an underscore using regex.", "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return (True)\r\n  else:\r\n    return (False)", "task_id": 43, "test_setup_code": "", "test_list": ["assert text_match(\"aab_cbbbc\") == True", "assert text_match(\"aab_Abbbc\") == False", "assert text_match(\"Aaab_abbbc\") == False"], "challenge_test_list": ["assert text_match(\"aab-cbbbc\") == False"]}
